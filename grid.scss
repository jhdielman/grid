// SASS Responsive Grid
// ----
// Sass (v3.4.12)
// Compass (v1.0.3)
// ----

// Vars
$columns: one, two, three, four, five, six, seven, eight, nine, ten, eleven, twelve;
$column-length: length($columns);
$break-points: 321, 481;
$mobile-first: false;

// Mixins
@mixin generate-grid-rules($col-len, $prefix: "") {
  #{$prefix}.row {
      display: table;
      table-layout: fixed;
      width: 100%;
  }
  #{$prefix}.row .column { display: table-cell; }

  @for $i from 1 through $col-len {
    $cols: nth($columns, $i);
    $row-selector: ".row.#{$cols}";
    $col-selector: ".column";
    $sub-col-len: $i - 1;
    @if $i == 1 {
      $row-selector: ".row > .column, #{$row-selector}";
      #{$prefix}#{$row-selector} > #{$col-selector} { width: 100%; }
    } @else {
      @for $j from 1 through $sub-col-len {
        @if $j > 1 {
          $nested-cols: nth($columns, $j);
          $col-selector: ".column.#{$nested-cols}";
        }
        #{$prefix}#{$row-selector} > #{$col-selector} { width: 100% * $j / $i; }
      }
    }
  }
}

/* Border Box - Feel free to move this to your base.css if you have one */
html {
  -moz-box-sizing: border-box;
  -webkit-box-sizing: border-box;
  box-sizing: border-box;
}
*, *:before, *:after {
  -moz-box-sizing: inherit;
  -webkit-box-sizing: inherit;
  box-sizing: inherit;
}

/* Standard Columns */
@include generate-grid-rules($column-length);

/* Stacked Columns */
@if $mobile-first {
  
  [class*="grid-at-"].row,
  [class*="grid-at-"].row > .column {
    display: block;
    width: 100%;
  }

  @each $bp in $break-points {
    @media (min-width: #{$bp}px) {
      @include generate-grid-rules($column-length, ".grid-at-#{$bp}");
    }
  }
  
} @else {
  
  @each $bp in $break-points {
    $row-sel: ".stack-at-#{$bp}.row";
    $col-sel: "#{$row-sel} > .column";
    @media (max-width: #{$bp}px) {
      #{$row-sel}, #{$col-sel} { display: block; width: 100%; }
    }
  }
  
}

